/* - 엔티티 기반의 매핑 수행(클래스와 테이블 매핑) => INSERT, SELECT, UPDATE, DELETE 사용 불필요 */
@Entity
@Table(name = "users") //User 클래스, users 명칭을 지닌 테이블과 매핑
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @Column(name = "email_address") //email_address 컬럼은 email 멤버변수와 연결
    private String email;
}



/* - CRUD 관련 SQL 자동 생성 */
 User user = new User();
user.setName("Alice");
user.setEmail("alice@example.com");

entityManager.persist(user);  // 자동으로 INSERT 실행
//=> INSERT INTO users (name, email_address) VALUES ('Alice', 'alice@example.com')


/* - 어노테이션 기반의 설정(@Entity, @Id, @GeneratedValue)
   - JPQL 지원(객체 기반 쿼리 언어) */
List<User> users = entityManager.createQuery(
    "SELECT u FROM User u WHERE u.name = :name", User.class)
    .setParameter("name", "Alice")
    .getResultList();


    
