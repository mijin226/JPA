/* @Id - 기본 키(primary key) 지정 */
@Entity //User클래스와 DB를 연결
@Table(name = "users") //DB에서 연결될 테이블 : users
public class User {
  @Id
  private int memberID;
  class User(){
  }
}


/* @GeneratedValue(strategy = GenerationType.IDENTITY) 
  - DB에서 자동으로 기본 키 생성(시퀀스, 서브쿼리,  Auto Imcrement와 동일개념)
  - SEQUENCE : Oracle, PostgreSQL에서 활용
  - TABLE : 별도 키 생성 테이블에 사용
  - AUTO : DB 벤더에 따라 자동 선택
*/
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;


/*
@Column(name = "컬럼명", nullable = false, unique = true)
  - 필드 특정 테이블 컬럼과 매핑, 제약조건 설정(true)
*/
@Column(name = "email_address", nullable = false, unique = true)
private String email;


/* @OneToOne - 1:1 관계에서의 매핑 */
@OneToOne
@JoinColumn(name = "profile_id")
private Profile profile;
​

/* @OneToMany - 1:多관계에서의 매핑(부모-자식) */
@OneToMany(mappedBy = "user")
private List<Order> orders;
​

/* @ManyToOne - 多:1 관계에서의 매핑(자식-부모) */
@ManyToOne
@JoinColumn(name = "user_id")
private User user;
​

/* @ManyToMany - 多:多 관계 매핑 */
@ManyToMany
@JoinTable(
    name = "user_roles",
    joinColumns = @JoinColumn(name = "user_id"),
    inverseJoinColumns = @JoinColumn(name = "role_id")
)
private Set<Role> roles;
